# -*- coding: utf-8 -*-
"""Submission Model Machine Learning dengan Time Series - Diggy Bani Nusantara.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BhDCy5mjI_BQcMa4Xp4qlfPvD54f1xsu

Nama : Diggy Bani Nusantara; Kelas : Belajar Machine Learning Untuk Pemula; No. Registrasi : 1494037162101-336; Program : FGA; Model Machine Learning dengan Time Series;
"""

#Library
from google.colab import files

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

import matplotlib.pyplot as plt

#Dataset
!pip install -q Kaggle

uploaded = files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d berkeleyearth/climate-change-earth-surface-temperature-data

#Unzip Dataset
!unzip climate-change-earth-surface-temperature-data.zip -d train

#Dataset Location
data_train = pd.read_csv('/content/train/GlobalLandTemperaturesByCountry.csv')
data_train.head()

#Dataset Climate Change Range From 1980 to 2010
data_train['dt'] = pd.to_datetime(data_train['dt'])  
get_data = (data_train['dt'] > '1980-01-01') & (data_train['dt'] <= '2010-01-01')
data_train.loc[get_data]

data_train = data_train.loc[get_data]
display(data_train)

#Checking Null/NaN
data_train.isnull().sum()

#Drop Null/NaN Column
data_train.dropna(subset=['AverageTemperature'],inplace=True)
data_train.dropna(subset=['AverageTemperatureUncertainty'],inplace=True)
data_train.isnull().sum()

#Plot Each Column
data_train_plot = data_train
data_train_plot[data_train_plot.columns.to_list()].plot(subplots=True, figsize=(15, 9))
plt.show()

#Plot Dates and Average Temperature
dates = data_train['dt'].values
temp = data_train['AverageTemperature'].values

dates = np.array(dates)
temp = np.array(temp)

plt.figure(figsize=(15,9))
plt.plot(dates, temp)

plt.title('Average Temperature', fontsize = 20)
plt.ylabel('Temperature')
plt.xlabel('Datetime')

data_train.dtypes

#Split Dataset
x_train, x_valid, y_train, y_valid = train_test_split(temp, dates, train_size=0.8, test_size = 0.2, shuffle = False )

#Total Data Train and Validation
print('Total Data Train : ',len(x_train))
print('Total Data Validation : ',len(x_valid))

#Change Dataset Type/Format for Modelling
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#Sequential Model
tf.keras.backend.set_floatx('float64')

train_set = windowed_dataset(x_train, window_size=64, batch_size=200, shuffle_buffer=1000)
val_set = windowed_dataset(x_valid, window_size=64, batch_size=200, shuffle_buffer=1000)
model = Sequential([
    LSTM(60, return_sequences=True),
    LSTM(60),
    Dense(30, activation="relu"),
    Dense(10, activation="relu"),
    Dense(1),
])

#Callback Mae
Mae = (data_train['AverageTemperature'].max() - data_train['AverageTemperature'].min()) * 10/100
print(Mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<2.4 and logs.get('val_mae')<2.4):
      print("\nMAE Telah Mencapai < 10%")
      self.model.stop_training = True
callbacks = myCallback()

#Learning Rate SGD for Optimizer
optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

#Compile
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=50, validation_data = val_set, callbacks=[callbacks])

#Plot Accuracy
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Accuracy')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

#Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()